/*
 * Copyright (c) 2021 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC  0
#define WIN  1
#define SCND 2
#define NUM  3
#define SYM  4
#define FUN  5
#define ADJ  6

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        td_num_layer: tap_dance_num_layer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo NUM>, <&tog NUM>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_escape {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp TAB>;
        };

        combo_backspace {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&bspc_del>;
        };

        combo_enter {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp ENTER>;
        };

        // Number Combos
        combo_one {
            timeout-ms = <50>;
            key-positions = <10 20>;
            bindings = <&kp N1>;
        };

        combo_two {
            timeout-ms = <50>;
            key-positions = <11 21>;
            bindings = <&kp N2>;
        };

        combo_three {
            timeout-ms = <50>;
            key-positions = <12 22>;
            bindings = <&kp N3>;
        };

        combo_four {
            timeout-ms = <50>;
            key-positions = <13 23>;
            bindings = <&kp N4>;
        };

        combo_five {
            timeout-ms = <50>;
            key-positions = <14 24>;
            bindings = <&kp N5>;
        };

        combo_six {
            timeout-ms = <50>;
            key-positions = <15 25>;
            bindings = <&kp N6>;
        };

        combo_seven {
            timeout-ms = <50>;
            key-positions = <16 26>;
            bindings = <&kp N7>;
        };

        combo_eight {
            timeout-ms = <50>;
            key-positions = <17 27>;
            bindings = <&kp N8>;
        };

        combo_nine {
            timeout-ms = <50>;
            key-positions = <18 28>;
            bindings = <&kp N9>;
        };

        combo_zero {
            timeout-ms = <50>;
            key-positions = <19 29>;
            bindings = <&kp N0>;
        };

        // Symbol Combos
        combo_grave {
            timeout-ms = <30>;
            key-positions = <3 13>;
            bindings = <&kp GRAVE>;
        };

        combo_left_bracket {
            timeout-ms = <30>;
            key-positions = <4 14>;
            bindings = <&kp LBKT>;
        };

        combo_right_bracket {
            timeout-ms = <30>;
            key-positions = <5 15>;
            bindings = <&kp RBKT>;
        };

        combo_single_quote {
            timeout-ms = <30>;
            key-positions = <6 16>;
            bindings = <&kp SQT>;
        };

        combo_minus {
            timeout-ms = <30>;
            key-positions = <8 18>;
            bindings = <&kp EQUAL>;
        };

        combo_equal {
            timeout-ms = <30>;
            key-positions = <7 17>;
            bindings = <&kp MINUS>;
        };

        combo_backslash {
            timeout-ms = <30>;
            key-positions = <9 19>;
            bindings = <&kp BSLH>;
        };

        // Shortcut and Macro combos
        combo_undo_mac{
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp LG(Z)>;
            layers = <MAC>;
        };

        combo_undo_win{
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp LC(Z)>;
            layers = <WIN>;
        };

        combo_cut_mac{
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LG(X)>;
            layers = <MAC>;
        };

        combo_cut_win{
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LC(X)>;
            layers = <WIN>;
        };

        combo_copy_mac{
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LG(C)>;
            layers = <MAC>;
        };

        combo_copy_win{
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LC(C)>;
            layers = <WIN>;
        };

        combo_paste_mac{
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LG(V)>;
            layers = <MAC>;
        };

        combo_paste_win{
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LC(V)>;
            layers = <WIN>;
        };

        combo_delete_word_mac{
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LA(BACKSPACE)>;
            layers = <MAC>;
        };

        combo_delete_word_win{
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LC(BACKSPACE)>;
            layers = <WIN>;
        };

        combo_left_desktop_mac {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LC(LEFT_ARROW)>;
            layers = <MAC>;
        };

        combo_right_desktop_mac {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LC(RIGHT_ARROW)>;
            layers = <MAC>;
        };

        combo_left_desktop_win {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LC(LG(LEFT_ARROW))>;
            layers = <WIN>;
        };

        combo_right_desktop_win {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LC(LG(RIGHT_ARROW))>;
            layers = <WIN>;
        };

        // Other Combos
        // On zaphod, cradio, and normal le chiffre this should be on keys 30 and 33
        // On le jlwffre this needs to be on 30 and 34 as the center key is in a part of the bottom row
        combo_layout_change {
            timeout-ms = <50>;
            key-positions = <30 34>;
            bindings = <&tog WIN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac_layer {
            display-name = "Mac";
            bindings = <
                &kp Q &kp W       &kp E      &kp R      &kp T                   &kp Y       &kp U      &kp I      &kp O       &kp P
                &kp A &hm LCTRL S &hm LALT D &hm LGUI F &hm GLOBE G             &hm GLOBE H &hm RGUI J &hm RALT K &hm RCTRL L &kp SEMI
                &kp Z &kp X       &kp C      &kp V      &kp B   &kp N           &kp M      &kp COMMA  &kp DOT     &kp FSLH
                                                &lt ADJ LPAR &kp LSHFT   &none   &lt SCND SPACE &lt NUM RPAR
            >;
        };

        win_layer {
            display-name = "Win";
            bindings = <
                &kp Q &kp W       &kp E      &kp R      &kp T                 &kp Y       &kp U      &kp I      &kp O       &kp P
                &kp A &hm LCTRL S &hm LALT D &hm LGUI F &hm GLOBE G           &hm GLOBE H &hm RGUI J &hm RALT K &hm RCTRL L &kp SEMI
                &kp Z &kp X       &kp C      &kp V      &kp B                 &kp N       &kp M      &kp COMMA  &kp DOT     &kp FSLH
                                                &lt ADJ LPAR &kp LSHFT   &none   &lt SCND SPACE &lt FUN RPAR
            >;
        };

        secondary_layer {
            display-name = "2nd";
            bindings = <
                &none  &kp HOME &kp UP   &kp END   &kp LBKT            &kp RBKT  &kp SQT  &kp MINUS &kp EQUAL &kp BSLH
                &none  &kp LEFT &kp DOWN &kp RIGHT &kp GRAVE           &kp GLOBE &kp RGUI &kp RALT  &kp RCTRL &kp SQT
                &kp N1 &kp N2   &kp N3   &kp N4    &kp N5              &kp N6    &kp N7   &kp N8    &kp N9    &kp N0
                                               &trans &trans   &none   &trans &trans
            >;
        };

        number_layer {
            display-name = "Num";
            bindings = <
                &kp FSLH  &kp N7 &kp N8 &kp N9 &kp MINUS           &none &none &none &none &none
                &kp ASTRK &kp N4 &kp N5 &kp N6 &kp PLUS            &none &none &none &none &none
                &kp COMMA &kp N1 &kp N2 &kp N3 &kp DOT             &none &none &none &none &none
                                            &kp N0 &none   &none   &trans &trans
            >;
        };

        symbol_layer {
            display-name = "Sym";
            bindings = <
                &none &none &none &none &none           &none &none &none &none &none
                &none &none &none &none &none           &none &none &none &none &none
                &none &none &none &none &none           &none &none &none &none &none
                                &trans &trans   &none   &trans &trans
            >;
        };

        function_layer {
            display-name = "Func";
            bindings = <
                &none &none &none &none &none           &none &kp F7 &kp F8 &kp F9 &kp F10
                &none &none &none &none &none           &none &kp F4 &kp F5 &kp F6 &kp F11
                &none &none &none &none &none           &none &kp F1 &kp F2 &kp F3 &kp F12
                                &trans &trans   &none   &trans &trans
            >;
        };

        adjust_layer {
            display-name = "Adj";
            bindings = <
                &bootloader &kp C_BKLT_TOG   &kp C_BRI_DN &kp C_BRI_UP &none           &out OUT_TOG &none        &none        &none        &bootloader
                &none       &kp C_MUTE       &kp C_VOL_DN &kp C_VOL_UP &none           &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
                &none       &kp C_PLAY_PAUSE &kp C_PREV   &kp C_NEXT   &none           &none        &none        &none        &none        &bt BT_CLR
                                                                    &none &none   &none   &none &none
            >;
        };
    };
};
