/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MAC_L 0
#define WIN_L  1
#define SCND_L 2
#define FUNC_L 3
#define AJST_L 4
#define GAME_L 5

/ {
        // Todo: New Behaviors
        //       double tap space to do period, space, one-shot shift
        behaviors {
                bspc_del: backspace_delete {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp BACKSPACE>, <&kp DELETE>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                };
        };

        combos {
                compatible = "zmk,combos";

                // Left Hand Combos
                combo_escape {
                        timeout-ms = <50>;
                        key-positions = <14 15>;
                        bindings = <&kp ESC>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };

                combo_tab {
                        timeout-ms = <50>;
                        key-positions = <15 16>;
                        bindings = <&kp TAB>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };

                combo_lctrl {
                        timeout-ms = <50>;
                        key-positions = <2 14>;
                        bindings = <&kp LCTRL>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };

                combo_lalt {
                        timeout-ms = <50>;
                        key-positions = <3 15>;
                        bindings = <&kp LALT>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };

                combo_lgui {
                        timeout-ms = <50>;
                        key-positions = <4 16>;
                        bindings = <&kp LGUI>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };
                
                combo_lglobe {
                        timeout-ms = <50>;
                        key-positions = <5 17>;
                        bindings = <&kp GLOBE>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };

                // Right Hand Combos
                combo_backspace {
                        timeout-ms = <50>;
                        key-positions = <19 20>;
                        bindings = <&bspc_del>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };

                combo_enter {
                        timeout-ms = <50>;
                        key-positions = <20 21>;
                        bindings = <&kp ENTER>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };
                
                combo_delete_word_mac{
                        timeout-ms = <50>;
                        key-positions = <19 20 21>;
                        bindings = <&kp LA(BACKSPACE)>;
                        layers = <MAC_L>;
                };

                combo_delete_word_win{
                        timeout-ms = <50>;
                        key-positions = <19 20 21>;
                        bindings = <&kp LC(BACKSPACE)>;
                        layers = <WIN_L>;
                };

                combo_capsword{
                        timeout-ms = <50>;
                        key-positions = <7 8 9>;
                        bindings = <&caps_word>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };

                combo_rglobe {
                        timeout-ms = <50>;
                        key-positions = <6 18>;
                        bindings = <&kp GLOBE>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };
                
                combo_rgui {
                        timeout-ms = <50>;
                        key-positions = <7 19>;
                        bindings = <&kp RGUI>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };

                combo_ralt {
                        timeout-ms = <50>;
                        key-positions = <8 20>;
                        bindings = <&kp RALT>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };

                combo_rctrl {
                        timeout-ms = <50>;
                        key-positions = <9 21>;
                        bindings = <&kp RCTRL>;
                        layers = <MAC_L WIN_L SCND_L FUNC_L>;
                };

                combo_left_desktop_mac {
                        timeout-ms = <50>;
                        key-positions = <31 32>;
                        bindings = <&kp LC(LEFT_ARROW)>;
                        layers = <MAC_L>;
                };

                combo_right_desktop_mac {
                        timeout-ms = <50>;
                        key-positions = <32 33>;
                        bindings = <&kp LC(RIGHT_ARROW)>;
                        layers = <MAC_L>;
                };

                combo_left_desktop_win {
                        timeout-ms = <50>;
                        key-positions = <31 32>;
                        bindings = <&kp LC(LG(LEFT_ARROW))>;
                        layers = <WIN_L>;
                };

                combo_right_desktop_win {
                        timeout-ms = <50>;
                        key-positions = <32 33>;
                        bindings = <&kp LC(LG(RIGHT_ARROW))>;
                        layers = <WIN_L>;
                };

                combo_layout_change {
                        timeout-ms = <50>;
                        key-positions = <36 40>;
                        bindings = <&tog WIN_L>;
                        layers = <MAC_L WIN_L>;
                };

                combo_game_layer {
                        timeout-ms = <50>;
                        key-positions = <11 35>;
                        bindings = <&tog GAME_L>;
                };
        };

        keymap {
                compatible = "zmk,keymap";
                
                mac_layer {
                        bindings = <
                                &kp EQUAL &kp Q &kp W &kp E &kp R &kp T     &kp Y &kp U &kp I     &kp O   &kp P    &kp BSLH
                                &kp MINUS &kp A &kp S &kp D &kp F &kp G     &kp H &kp J &kp K     &kp L   &kp SEMI &kp SQT
                                &kp LBKT  &kp Z &kp X &kp C &kp V &kp B     &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp RBKT
                                                &kp LALT &kp LSHFT &lt SCND_L SPACE &lt AJST_L GRAVE &kp BSPC
                        >;
                };

                win_layer {
                        bindings = <
                                &kp EQUAL &kp Q &kp W &kp E &kp R &kp T     &kp Y &kp U &kp I     &kp O   &kp P    &kp BSLH
                                &kp MINUS &kp A &kp S &kp D &kp F &kp G     &kp H &kp J &kp K     &kp L   &kp SEMI &kp SQT
                                &kp LBKT  &kp Z &kp X &kp C &kp V &kp B     &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp RBKT
                                                &kp LALT &kp LSHFT &lt SCND_L SPACE &lt AJST_L GRAVE &kp LGUI
                        >;
                };

                secondary_layer {
                        bindings = <
                                &none &kp EQUAL &kp HOME &kp UP   &kp END   &kp LBKT     &kp RBKT &none    &none    &none     &kp BSLH &none
                                &none &kp MINUS &kp LEFT &kp DOWN &kp RIGHT &none        &none    &sk LGUI &sk LALT &sk LCTRL &kp SQT  &none
                                &none &kp N1    &kp N2   &kp N3   &kp N4    &kp N5       &kp N6   &kp N7   &kp N8   &kp N9    &kp N0   &none
                                                                    &trans &trans &trans &trans &trans
                        >;
                };

                function_layer {
                        bindings = <
                                &none  &kp F1 &kp F2 &kp F3 &kp F4 &kp F5     &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &none
                                &trans &none  &none  &none  &none  &none      &none  &none  &none  &none  &none   &none
                                &trans &none  &none  &none  &none  &none      &none  &none  &none  &none  &none   &trans
                                                      &none    &none    &none    &none    &none
                        >;
                };

                adjust_layer {
                        bindings = <
                                &none &none &kp C_BKLT_TOG   &kp C_BRI_DN &kp C_BRI_UP &none     &none        &none        &none        &none        &none        &bootloader
                                &none &none &kp C_MUTE       &kp C_VOL_DN &kp C_VOL_UP &none     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
                                &none &none &kp C_PLAY_PAUSE &kp C_PREV   &kp C_NEXT   &none     &none        &none        &none        &none        &bt BT_CLR   &none
                                                                        &trans    &trans    &trans    &trans    &trans
                        >;
                };

                game_layer {
                        bindings = <
                                &kp ESC    &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U &kp I     &kp O      &kp P         &kp BACKSPACE
                                &kp TAB    &kp A &kp S &kp D &kp F &kp G   &kp H &kp J &kp K     &kp L      &kp SEMI      &kp SQT
                                &kp LSHIFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M &kp COMMA &kp PERIOD &kp BACKSLASH &kp ENTER
                                                  &kp LCTRL &kp SPACE &kp LALT &kp LGUI &tog GAME_L
                        >;
                };
        };
};
