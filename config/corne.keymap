/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE_l 0
#define RAISE_L 1
#define LOWER_L 2
#define BLUE_L 3
#define MEDI_L 4
#define GAME_L 5

/ {
        chosen {
                zmk,matrix_transform = &five_column_transform;
        };

        behaviors {
                hm: homerow_mods {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick-tap-ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
                };
        };

        combos {
                compatible = "zmk,combos";
                combo_esc {
                        timeout-ms = <50>;
                        key-positions = <11 12>;
                        bindings = <&kp ESC>;
                };

                combo_tab {
                        timeout-ms = <50>;
                        key-positions = <12 13>;
                        bindings = <&kp TAB>;
                };

                combo_enter {
                        timeout-ms = <50>;
                        key-positions = <17 18>;
                        bindings = <&kp ENTER>;
                };

                combo_backspace {
                        timeout-ms = <50>;
                        key-positions = <16 17>;
                        bindings = <&kp BACKSPACE>;
                };

                // Modifier Combos

                combo_left_ctrl{
                        timeout-ms = <50>;
                        key-positions = <11 21>;
                        bindings = <&kp LEFT_CONTROL>;
                };

                combo_left_alt{
                        timeout-ms = <50>;
                        key-positions = <12 22>;
                        bindings = <&kp LEFT_ALT>;
                };

                combo_left_gui{
                        timeout-ms = <50>;
                        key-positions = <13 23>;
                        bindings = <&kp LEFT_GUI>;
                };

                combo_right_gui{
                        timeout-ms = <50>;
                        key-positions = <16 26>;
                        bindings = <&kp RIGHT_GUI>;
                };

                combo_right_alt{
                        timeout-ms = <50>;
                        key-positions = <17 27>;
                        bindings = <&kp RIGHT_ALT>;
                };

                combo_right_ctrl{
                        timeout-ms = <50>;
                        key-positions = <18 28>;
                        bindings = <&kp RIGHT_CONTROL>;
                };
        };

        // conditional_layers {
        //         compatible = "zmk,conditional-layers";
        //         tri_layer {
        //                 if-layers = <SYMB_L SYM2_L>;
        //                 then-layer = <NAVI_L>;
        //         };
        // };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "Base";
                        bindings = <
                                &kp Q &kp W &kp E &kp R &kp T            &kp Y &kp U        &kp I     &kp O   &kp P
                                &kp A &kp S &kp D &kp F &kp G            &kp H &kp J        &kp K     &kp L   &kp SEMI
                                &kp Z &kp X &kp C &kp V &lt BLUE_L B     &kp N &lt MEDI_L M &kp COMMA &kp DOT &kp FSLH
                                        &kp LCTRL &kp LGUI &kp LSHFT     &lt SYMB_L SPACE &kp LALT &mo LOWER_L
                        >;
                };

                raise_layer {
                        label = "Raise";
                        bindings = <
                                &kp N1 &kp N2 &kp N3 &kp N4 &kp N5        &kp N6    &kp N7    &kp N8   &kp N9    &kp N0
                                &none  &none  &none  &none  &kp GRAVE     &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT &kp SQT
                                &none  &none  &none  &none  &none         &kp MINUS &kp EQUAL &kp LBKT &kp RBKT  &kp BSLH
                                                 &trans &trans &trans     &trans &trans &trans
                        >;
                };

                lower_layer {
                        label = "Lower";
                        bindings = <
                                &none &none &none &none &none     &none &none &none &none &none
                                &none &none &none &none &none     &none &none &none &none &none
                                &none &none &none &none &none     &none &none &none &none &none
                                            &none &none &none     &none &none &none
                        >;
                };

                bluetooth_layer {
                        label = "Blue";
                        bindings = <
                                &none &none &none &none &none     &none        &none        &none        &none        &none
                                &none &none &none &none &none     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
                                &none &none &none &none &none     &none        &none        &none        &none        &bt BT_CLR
                                        &none &none &none     &none &none &none
                        >;
                };

                media_layer {
                        label = "Media";
                        bindings = <
                                &kp C_BKLT_TOG   &kp C_BRI_DN &kp C_BRI_UP &none &none     &none &none &none &none &none
                                &kp C_MUTE       &kp C_VOL_DN &kp C_VOL_UP &none &none     &none &none &none &none &none
                                &kp C_PLAY_PAUSE &kp C_PREV   &kp C_NEXT   &none &none     &none &none &none &none &none
                                                                &none &none &none     &none &none &none
                        >;
                };

        };
};