/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/matrix_transform.h>

#define MAC_L 0
#define WIN_L 1
#define SCND_L 2
#define FUNC_L 3
#define AJST_L 4
#define GAME_L 5

/ {
        behaviors {
                hm: homerow_mods {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS";
                        #binding-cells = <2>;
                        tapping-term-ms = <150>;
                        quick-tap-ms = <150>;
                        require-prior-idle-ms = <125>;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&kp>;
                };

                bspc_del: backspace_delete {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp BACKSPACE>, <&kp DELETE>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                };
        };

        combos {
                compatible = "zmk,combos";

                combo_escape {
                        timeout-ms = <50>;
                        key-positions = <14 15>;
                        bindings = <&kp ESC>;
                        layers = <MAC_L SCND_L FUNC_L>;
                };

                combo_tab {
                        timeout-ms = <50>;
                        key-positions = <15 16>;
                        bindings = <&kp TAB>;
                        layers = <MAC_L SCND_L FUNC_L>;
                };

                combo_backspace {
                        timeout-ms = <50>;
                        key-positions = <19 20>;
                        bindings = <&bspc_del>;
                        layers = <MAC_L SCND_L FUNC_L>;
                };

                combo_enter {
                        timeout-ms = <50>;
                        key-positions = <20 21>;
                        bindings = <&kp ENTER>;
                        layers = <MAC_L SCND_L FUNC_L>;
                };
                
                combo_delete_word_mac{
                        timeout-ms = <50>;
                        key-positions = <7 8 9>;
                        bindings = <&kp LA(BACKSPACE)>;
                        layers = <MAC_L>;
                };

                combo_delete_word_win{
                        timeout-ms = <50>;
                        key-positions = <7 8 9>;
                        bindings = <&kp LC(BACKSPACE)>;
                        layers = <WIN_L>;
                };

                combo_left_desktop_mac {
                        timeout-ms = <50>;
                        key-positions = <31 32>;
                        bindings = <&kp LC(LEFT_ARROW)>;
                        layers = <MAC_L>;
                };

                combo_right_desktop_mac {
                        timeout-ms = <50>;
                        key-positions = <32 33>;
                        bindings = <&kp LC(RIGHT_ARROW)>;
                        layers = <MAC_L>;
                };

                combo_left_desktop_win {
                        timeout-ms = <50>;
                        key-positions = <31 32>;
                        bindings = <&kp LC(LG(LEFT_ARROW))>;
                        layers = <WIN_L>;
                };

                combo_right_desktop_mac {
                        timeout-ms = <50>;
                        key-positions = <32 33>;
                        bindings = <&kp LC(LG(RIGHT_ARROW))>;
                        layers = <WIN_L>;
                };

                combo_change_mode {
                        timeout-ms = <50>;
                        key-positions = <36 41>;
                        bindings = <&tog WIN_L>;
                };
                
                combo_game_layer {
                        timeout-ms = <50>;
                        key-positions = <11 35>;
                        bindings = <&tog GAME_L>;
                };
        };
        
        keymap {
                compatible = "zmk,keymap";

                mac_layer {
                        display-name = "Mac";
                        bindings = <
                                &kp GRAVE &kp Q &kp W       &kp E      &kp R      &kp T           &kp Y       &kp U      &kp I      &kp O       &kp P    &kp BSLH
                                &kp MINUS &kp A &hm LCTRL S &hm LALT D &hm LGUI F &hm GLOBE G     &hm GLOBE H &hm RGUI J &hm RALT K &hm RCTRL L &kp SEMI &kp SQT
                                &kp EQUAL &kp Z &kp X       &kp C      &kp V      &kp B           &kp N       &kp M      &kp COMMA  &kp DOT     &kp FSLH &kp LGUI
                                                          &kp LBKT &lt AJST_L LPAR &kp LSHIFT     &lt SCND_L SPACE &kp RPAR &kp RBKT
                        >;
                };

                win_layer {
                        display-name = "Win";
                        bindings = <
                                &kp GRAVE &kp Q &kp W       &kp E      &kp R      &kp T           &kp Y       &kp U      &kp I      &kp O       &kp P    &kp BSLH
                                &kp MINUS &kp A &hm LCTRL S &hm LALT D &hm LGUI F &hm GLOBE G     &hm GLOBE H &hm RGUI J &hm RALT K &hm RCTRL L &kp SEMI &kp SQT
                                &kp EQUAL &kp Z &kp X       &kp C      &kp V      &kp B           &kp N       &kp M      &kp COMMA  &kp DOT     &kp FSLH &kp LGUI
                                                          &kp LBKT &lt AJST_L LPAR &kp LSHIFT     &lt SCND_L SPACE &kp RPAR &kp RBKT
                        >;
                };

                secondary_layer {
                        display-name = "Nav";
                        bindings = <
                                &none &none  &kp HOME &kp UP   &kp END   &none        &none    &kp GRAVE &kp MINUS &kp EQUAL &none  &none
                                &none &none  &kp LEFT &kp DOWN &kp RIGHT &kp LBKT     &kp RBKT &kp RGUI  &kp RALT  &kp RCTRL &none  &none
                                &none &kp N1 &kp N2   &kp N3   &kp N4    &kp N5       &kp N6   &kp N7    &kp N8    &kp N9    &kp N0 &none
                                                             &trans &trans &trans     &trans &trans &trans
                        >;
                };

                function_layer {
                        display-name = "Fun";
                        bindings = <
                                &none  &kp F1 &kp F2 &kp F3 &kp F4 &kp F5     &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &none
                                &trans &none  &none  &none  &none  &none      &none  &none  &none  &none  &none   &none
                                &trans &none  &none  &none  &none  &none      &none  &none  &none  &none  &none   &trans
                                                       &none &none &none      &none &none &none
                        >;
                };

                adjust_layer {
                        display-name = "Adj";
                        bindings = <
                                &none &none &kp C_BKLT_TOG   &kp C_BRI_DN &kp C_BRI_UP &none     &none        &none        &none        &none        &none        &bootloader
                                &none &none &kp C_MUTE       &kp C_VOL_DN &kp C_VOL_UP &none     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
                                &none &none &kp C_PLAY_PAUSE &kp C_PREV   &kp C_NEXT   &none     &none        &none        &none        &none        &bt BT_CLR   &none
                                                                           &none &none &none     &none &none &none
                        >;      
                };

                game_layer {
                        display-name = "Games";
                        bindings = <
                                &kp ESC    &kp Q &kp W &kp E &kp R &kp T     &kp Y &kp U &kp I     &kp O      &kp P         &kp BACKSPACE
                                &kp TAB    &kp A &kp S &kp D &kp F &kp G     &kp H &kp J &kp K     &kp L      &kp SEMI      &kp SQT
                                &kp LSHIFT &kp Z &kp X &kp C &kp V &kp B     &kp N &kp M &kp COMMA &kp PERIOD &kp BACKSLASH &kp ENTER
                                            &kp LCTRL &kp SPACE &kp LALT     &kp SPACE &none &none
                        >;
                };
        };
};
