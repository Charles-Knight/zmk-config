/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE_l 0
#define FUNC_L 1
#define NUMB_L 2
#define SYMB_L 3
#define SYM2_L 4
#define NAVI_L 5
#define BLUE_L 6
#define MEDI_L 7
#define GAME_L 8

/ {
        chosen {
                zmk,matrix_transform = &five_column_transform;
        };

        behaviors {
                hm: homerow_mods {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick-tap-ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
                };
        };

        combos {
                compatible = "zmk,combos";
                combo_esc {
                        timeout-ms = <50>;
                        key-positions = <11 12>;
                        bindings = <&kp ESC>;
                };

                combo_tab {
                        timeout-ms = <50>;
                        key-positions = <12 13>;
                        bindings = <&kp TAB>;
                };

                combo_enter {
                        timeout-ms = <50>;
                        key-positions = <17 18>;
                        bindings = <&kp ENTER>;
                };

                combo_backspace {
                        timeout-ms = <50>;
                        key-positions = <16 17>;
                        bindings = <&kp BACKSPACE>;
                };

                combo_gui {
                        timeout-ms = <50>;
                        key-positions = <13 14>;
                        bindings = <&kp LEFT_GUI>;
                };

                // Number Row Combos

                combo_one{
                        timeout-ms = <50>;
                        key-positions = <0 10>;
                        bindings = <&kp 1>;
                };

                combo_two{
                        timeout-ms = <50>;
                        key-positions = <1 11>;
                        bindings = <&kp 2>;
                };

                combo_three{
                        timeout-ms = <50>;
                        key-positions = <2 12>;
                        bindings = <&kp 3>;
                };

                combo_four{
                        timeout-ms = <50>;
                        key-positions = <3 13>;
                        bindings = <&kp 4>;
                };

                combo_five{
                        timeout-ms = <50>;
                        key-positions = <4 14>;
                        bindings = <&kp 5>;
                };

                combo_six{
                        timeout-ms = <50>;
                        key-positions = <5 15>;
                        bindings = <&kp 6>;
                };

                combo_seven{
                        timeout-ms = <50>;
                        key-positions = <6 16>;
                        bindings = <&kp 7>;
                };

                combo_eight{
                        timeout-ms = <50>;
                        key-positions = <7 17>;
                        bindings = <&kp 8>;
                };

                combo_nine{
                        timeout-ms = <50>;
                        key-positions = <8 18>;
                        bindings = <&kp 9>;
                };

                combo_zero{
                        timeout-ms = <50>;
                        key-positions = <9 19>;
                        bindings = <&kp 0>;
                };

                // Modifier Combos

                combo_left_ctrl{
                        timeout-ms = <50>;
                        key-positions = <0 1>;
                        bindings = <&kp LEFT_CONTROL>;
                };

                combo_left_alt{
                        timeout-ms = <50>;
                        key-positions = <1 2>;
                        bindings = <&kp LEFT_ALT>;
                };

                combo_left_gui{
                        timeout-ms = <50>;
                        key-positions = <2 3>;
                        bindings = <&kp LEFT_GUI>;
                };

                combo_right_gui{
                        timeout-ms = <50>;
                        key-positions = <6 7>;
                        bindings = <&kp RIGHT_GUI>;
                };

                combo_right_alt{
                        timeout-ms = <50>;
                        key-positions = <7 8>;
                        bindings = <&kp RIGHT_ALT>;
                };

                combo_right_ctrl{
                        timeout-ms = <50>;
                        key-positions = <8 9>;
                        bindings = <&kp RIGHT_CONTROL>;
                };
        };

        // conditional_layers {
        //         compatible = "zmk,conditional-layers";
        //         tri_layer {
        //                 if-layers = <SYMB_L SYM2_L>;
        //                 then-layer = <NAVI_L>;
        //         };
        // };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "Base";
                        bindings = <
                                &kp Q &kp W       &kp E      &kp R      &kp T            &kp Y &kp U      &kp I          &kp O         &kp P
                                &kp A &kp S       &kp D      &kp F      &kp G            &kp H &kp J      &kp K          &kp L         &kp SEMI
                                &kp Z &hm LCTRL X &hm LALT C &hm LGUI V &lt BLUE_L B     &kp N &hm RGUI M &hm RALT COMMA &hm RCTRL DOT &kp FSLH
                                                     &none  &kp LSHFT &lt NAVI_L TAB     &lt SYMB_L SPACE &kp RSHFT &mo MEDI_L
                        >;
                };

                function_layer {
                        label = "Func";
                        bindings = <
                                &kp F1 &kp F2 &kp F3 &kp F4 &kp F5     &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
                                &none  &none  &none  &none  &none      &none  &none  &none  &none  &none
                                &none  &none  &none  &none  &none      &none  &none  &none  &none  &none
                                                &none &none &none      &none &none &none
                        >;
                };

                number_layer {
                        label = "Num";
                        bindings = <
                                &none &kp N7 &kp N8 &kp N9 &none     &none &none    &none    &none     &none
                                &none &kp N4 &kp N5 &kp N6 &none     &none &kp LGUI &kp LALT &kp LCTRL &none
                                &none &kp N1 &kp N2 &kp N3 &none     &none &none    &none    &none     &none
                                        &kp ENTER &kp DOT &kp N0     &trans &trans &trans
                        >;
                };

                symbol_layer_1 {
                        label = "Sym";
                        bindings = <
                                &kp N1    &kp N2    &kp N3  &kp N4   &kp N5        &none &none    &none    &none     &none
                                &kp N6    &kp N7    &kp N8  &kp N9   &kp N0        &none &none    &none    &none     &none
                                &kp MINUS &kp EQUAL &kp SQT &kp BSLH &kp GRAVE     &none &kp RGUI &kp RALT &kp RCTRL &kp RSHFT
                                                   &kp LBKT &kp RBKT &trans        &trans &trans &trans
                        >;
                };

                symbol_layer_2 {
                        label = "Symb2";
                        bindings = <
                                &kp N1   &kp N2 &kp N3   &kp N4   &kp N5        &kp N6    &kp N7    &kp N8  &kp N9     &kp N0
                                &kp LBKT &kp LT &kp LBRC &kp LPAR &kp TILDE     &kp MINUS &kp EQUAL &kp SQT &none      &kp PIPE
                                &kp RBKT &kp GT &kp RBRC &kp RPAR &kp GRAVE     &kp UNDER &kp PLUS  &kp DQT &kp PERIOD &kp BSLH
                                                       &trans &trans &trans     &trans &trans &trans
                        >;
                };

                navigation_layer {
                        label = "Navi";
                        bindings = <
                                &none     &none     &none    &none    &none      &none    &none     &none     &none     &none
                                &none     &none     &none    &none    &none      &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &none
                                &kp LSHFT &kp LCTRL &kp LALT &kp LGUI &none      &kp HOME &kp PG_DN &kp PG_UP &kp END   &none
                                                       &trans &trans &trans      &trans &trans &trans
                        >;
                };

                bluetooth_layer {
                        label = "Blue";
                        bindings = <
                                &none &none &none &none &none     &none        &none        &none        &none        &none
                                &none &none &none &none &none     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
                                &none &none &none &none &none     &none        &none        &none        &none        &bt BT_CLR
                                        &none &none &none     &none &none &none
                        >;
                };

                media_layer {
                        label = "Media";
                        bindings = <
                                &kp C_BKLT_TOG   &kp C_BRI_DN &kp C_BRI_UP &none &none     &none &none &none &none &none
                                &kp C_MUTE       &kp C_VOL_DN &kp C_VOL_UP &none &none     &none &none &none &none &none
                                &kp C_PLAY_PAUSE &kp C_PREV   &kp C_NEXT   &none &none     &none &none &none &none &none
                                                                &none &none &none     &none &none &none
                        >;
                };

        };
};